   # #   ,V
,V
rectangleType,v
#,v
   # #      # #   ,V
   # #      # #      # #   ,V
10.0.0.2 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGpdxpIpZPVJh6DF5FgVg4WSObw047uwlnBj9MRZrt66ZldQ6Ea298GfoZTFxMmU6AynsRvkcPzmpFp7CcRhL8c=50.142.216.9 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAW3gzWeNFKGSGll1n4q+MV2Zj5h/+vq3Jc6knVdl3vwQUcs747Fq5kNHKCpfb+WNdkLb4/J6ZAlHN8EyVmfUc0=192.168.0.19 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFWHbsdlA27Mg1CCc7gdx5i6IOqdCZ5DT3U7tsk2x/uhAxAWrstQN+0zZdgutE1f8M5ETrzH3TQCf9QaK7CpSIs=192.168.43.148 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBtB1NHYphi7dtf5nJIkSKeleUGbkXLdJ5jQCClw6hxEkPZe7C2tgYQPhb+c+t/73KvgzMnruzYDODbS3CecfjI=,v
recOne.,v
Two,v
One,                               const rectangleType& recTwo,v
o,v
w,v
T,v
recOne,v
.,v
recOne,                               const rectangleType& recTwo,v
rectangleType& rec,                                ,v
rec,v
c,v
e,v
r,v
rectangleType& rec,v
<,v
 ,v
\n,v
n,v
\,v
*,v
wlp1s,v
wlp1s0,v
# Volume indicator## The first parameter sets the step (and units to display)# The second parameter overrides the mixer selection# See the script for details.[volume]label=♪:instance=Master#instance=PCMinterval=3signal=10,v
# CPU usage## The script may be called with -w and -c switches to specify thresholds,# see the script for details.#[cpu_usage]#label=CPU#interval=10#min_width=CPU: 100.00%#separator=false[load_average]interval=10,v
#,V
false,v
=,v
N,v
recNew = ,v
p,v
y,v
l,v
g,v
a,v
t,v
Addini,v
Adding,v
add,v
sub,v
  recNew = addRectangles(recOne, recTwo);  cout << "Adding:\n" <<      << recNew.getLength() << recNew.getWidth() << '\n'      << endl;,V
  cout << "Adding:\n" <<      << recNew.getLength() << recNew.getWidth() << '\n'      << endl;,V
      ,V
<< "Subtracting:\n" <<      subRectangles(recOne, recTwo)      << "Multiplying:\n" <<      multiRectangles(recOne, recTwo)      << "Dividing:\n" <<      divideRectangles(recOne, recTwo)      << endl;,v
      << recTwo.getLength() << recTwo.getWidth() << '\n',V
addRectangles(recOne, recTwo),v
O,v
      << recOne.getLength() << recOne getWidth() << '\n',V
;,v
Multiplying,v
  << "Multiplying:\n" <<,V
Subtracting,v
  << "Subtracting:\n" <<,V
void,v
    cout << "Multiplying...\n"        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;,V
cout << "rOne: " << rOne.getLength() << ' '        << rOne.getWidth() << '\n'        << "rTwo: " << rTwo.getLength() << ' '        << rTwo.getWidth() << '\n'        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;,v
    return rNew;,V
    cout << "Subtracting...\n"        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;,V
    cout << "Adding...\n"        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;,V
       << rTwo.getWidth() << '\n',V
cout << "rOne: " << rOne.getLength() << ' '        << rOne.getWidth() << '\n'        << "rTwo: " << rTwo.getLength() << ' '     ,v
    cout << "Subtracting...\n",V
    cout << "Adding...\n",V
  cout << "rOne: " << rOne.getLength() << ' '        << rOne.getWidth() << '\n'        << "rTwo: " << rTwo.getLength() << ' '        << rTwo.getWidth() << '\n',v
b,v
  addRectangles(recOne, recTwo);,V
multi,v
void multiRectanbles(rectangleType& rOne, rectangleType& rTwo){    rectangleType rNew = rOne * rTwo;    cout << "rOne: " << rOne.getLength() << ' '        << rOne.getWidth() << '\n'        << "rTwo: " << rTwo.getLength() << ' '        << rTwo.getWidth() << '\n'        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;},v
-,v
void subRectanbles(rectangleType& rOne, rectangleType& rTwo){    rectangleType rNew = rOne - rTwo;    cout << "rOne: " << rOne.getLength() << ' '        << rOne.getWidth() << '\n'        << "rTwo: " << rTwo.getLength() << ' '        << rTwo.getWidth() << '\n'        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;},v
+,v
void addRectanbles(rectangleType& rOne, rectangleType& rTwo){    rectangleType rNew = rOne + rTwo;    cout << "rOne: " << rOne.getLength() << ' '        << rOne.getWidth() << '\n'        << "rTwo: " << rTwo.getLength() << ' '        << rTwo.getWidth() << '\n'        << "rNew: " << rNew.getLength() << ' '        << rNew.getWidth() << endl;},v
  rectangleType recNew;,V
= recOne + recTwo,v
  cout << "recOne: " << recOne.getLength() << ' '       << recOne.getWidth() << '\n'       << "recTwo: " << recTwo.getLength() << ' '       << recTwo.getWidth() << '\n'       << "recNew: " << recNew.getLength() << ' '       << recNew.getWidth() << endl;,v
void addRectanbles(rectangleType& rOne, rectangleType& rTwo);,V
void multiRectanbles(rectangleType& rOne, rectangleType& rTwo);,V
void subRectanbles(rectangleType& rOne, rectangleType& rTwo);,V
West,v
b1,v
# Key indicators## Add the following bindings to i3 config file:## bindsym --release Caps_Lock exec pkill -SIGRTMIN+11 i3blocks# bindsym --release Num_Lock  exec pkill -SIGRTMIN+11 i3blocks[keyindicator]instance=CAPSinterval=oncesignal=11#[keyindicator]#instance=NUM#interval=once#signal=11,v
4,v
,v
#PIDFile=/run/openvpn@%i.pid,V
ExecStart=/usr/bin/openvpn --cd /etc/openvpn --config /etc/openvpn/%i.conf --daemon openvpn@%i ,v
/run/openvpn/home.pid,v
#label=BAT,V
1,v
#label=VOL,V
for file in $(ls)do    if [[ $file == "two" ]]    then         ls | sort > $file    fidone,v
| sort,v
$,v
(,v
